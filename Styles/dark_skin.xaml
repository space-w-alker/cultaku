<ResourceDictionary x:Class="culTAKU.Styles.dark_skin"
                    x:ClassModifier="public"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:culTAKU.Styles"
                    xmlns:converters="clr-namespace:culTAKU">



    <SolidColorBrush x:Key="BlackBrush" Color="Black"></SolidColorBrush>
    <SolidColorBrush x:Key="PrimaryBrush" Color="#FF2B2B2B"></SolidColorBrush>
    <SolidColorBrush x:Key="SecondaryBrush" Color="#FF5F5F5F"></SolidColorBrush>
    <SolidColorBrush x:Key="ToneBrush" Color="Cyan"></SolidColorBrush>
    <SolidColorBrush x:Key="HighlightBrush" Color="#FFD1D1D1"></SolidColorBrush>

    <SolidColorBrush x:Key="DefaultTextBrush" Color="White"></SolidColorBrush>
    <SolidColorBrush x:Key="DisabledTextBrush" Color="#FF7C7C7C"></SolidColorBrush>

    <Storyboard x:Key="SwellView">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="PlayButton">
            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1.5">
                <EasingDoubleKeyFrame.EasingFunction>
                    <ElasticEase EasingMode="EaseOut" Oscillations="2"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="PlayButton">
            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1.5">
                <EasingDoubleKeyFrame.EasingFunction>
                    <ElasticEase EasingMode="EaseOut" Oscillations="1"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="ShrinkView">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="PlayButton">
            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CircleEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="PlayButton">
            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CircleEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="ShowPlayButton">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="PlayButtonPath">
            <EasingColorKeyFrame KeyTime="0" Value="#00000000"/>
            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="Cyan"/>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="HidePlayButton">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="PlayButtonPath">
            <EasingColorKeyFrame KeyTime="0" Value="#FF60D3D3"/>
            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#00000000"/>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>






    <!--<converters:Me x:Key="What"/>
    <converters:ImageUriConverter x:Key="image_uri_converter"/>-->


    <Style x:Key="SimpleFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{StaticResource ToneBrush}" CornerRadius="0" BorderThickness="1" Padding="0" SnapsToDevicePixels="True" Margin="2">

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="ButtonNoBackground">
        <Setter Property="Background" Value="#00932D2D"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="PlayButtonStyle">
        <Setter Property="Background" Value="#00932D2D"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <DataTemplate x:Key="AnimeDisplayTemplate">
        <Grid>
            <Grid Height="120" Width="90" Margin="0,5" >
                <Image Source="{Binding ImagePath, Converter={StaticResource ImageLocationConverter}}" Stretch="Fill" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <TextBlock Text="{Binding Name}" VerticalAlignment="Bottom" Foreground="White" TextWrapping="WrapWithOverflow" LineStackingStrategy="MaxHeight" TextAlignment="Center" FontWeight="Bold" LineHeight="Auto" MaxHeight="60" FontStretch="Normal" TextTrimming="CharacterEllipsis" Background="#99000000"/>
                <Grid Width="40" Height="40" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <Path Data="M -93.781992,209.13172 V -50.271211 H 130.86754 Z" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="{DynamicResource SecondaryBrush}" Stretch="Fill"/>
                    <TextBlock Text="{Binding Rating, StringFormat='0.00'}" Foreground="White" FontWeight="Bold" Padding="2" FontSize="9" Margin="0,5,0,0"/>
                </Grid>

                <Button Name="PlayButton" Width="30" Height="30" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource PlayButtonStyle}" RenderTransformOrigin="0.5,0.5" Tag="{Binding Id}" Cursor="Hand" Click="PlayButton_Click" >
                    <Button.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Button.RenderTransform>
                    <!--<Path Name="PlayButtonPath" Stretch="Fill" Fill="{x:Null}" Data="m 110.18298,102.27672 a 66.901787,66.901787 0 0 0 -66.901848,66.90186 66.901787,66.901787 0 0 0 66.901848,66.90186 66.901787,66.901787 0 0 0 66.90185,-66.90186 66.901787,66.901787 0 0 0 -66.90185,-66.90186 z m -16.391248,38.51134 24.587128,14.19552 24.58714,14.195 -24.58714,14.19551 -24.587128,14.19552 v -28.39103 z" Stroke="#00000000" StrokeThickness="3"/>-->
                    <Path Name="PlayButtonPath" Stretch="Fill" Fill="{x:Null}" Data="m 163.99573,191.72713 -80.840974,0 -80.8409741,0 L 42.734268,121.7168 83.154755,51.706459 123.57524,121.71679 Z" Stroke="#00000000" StrokeThickness="12" StrokeLineJoin="Round" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="90"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>

                </Button>

            </Grid>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
                    <BeginStoryboard Storyboard="{StaticResource SwellView}"/>
                    <BeginStoryboard Storyboard="{StaticResource ShowPlayButton}"/>
                </EventTrigger>
                <EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
                    <BeginStoryboard Storyboard="{StaticResource ShrinkView}"/>
                    <BeginStoryboard Storyboard="{StaticResource HidePlayButton}"/>
                </EventTrigger>
            </Grid.Triggers>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="ContinueWatchingDisplayTemplate">
        <Grid>
            <Grid Height="120" Width="90" Margin="0,5" >
                <Image Source="{Binding ImagePath, Converter={StaticResource ImageLocationConverter}}" Stretch="Fill" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <TextBlock Text="{Binding Name}" VerticalAlignment="Bottom" Foreground="White" TextWrapping="WrapWithOverflow" LineStackingStrategy="MaxHeight" TextAlignment="Center" FontWeight="Bold" LineHeight="Auto" MaxHeight="60" FontStretch="Normal" TextTrimming="CharacterEllipsis" Background="#99000000"/>
                <Grid Width="40" Height="40" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <Path Data="M -93.781992,209.13172 V -50.271211 H 130.86754 Z" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="{DynamicResource SecondaryBrush}" Stretch="Fill"/>
                    <TextBlock Text="{Binding Rating, StringFormat='0.00'}" Foreground="White" FontWeight="Bold" Padding="2" FontSize="9" Margin="0,5,0,0"/>
                </Grid>
            </Grid>
            
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="Playing_EpisodesDisplay">
        <Grid>
            <StackPanel Orientation="Vertical">
                <TextBlock Text="{Binding EpisodeNumber, StringFormat='Episode 0'}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="16" FontWeight="Bold" Foreground="White"/>
                <TextBlock Text="{Binding EpisodePath}" HorizontalAlignment="Stretch" TextAlignment="Center" TextTrimming="CharacterEllipsis" FontSize="10" Background="{x:Null}" Foreground="#FFDADADA"/>
                <Border Name="StatusBorder" Padding="6,2" HorizontalAlignment="Right" Background="Black">
                    <TextBlock Text="{Binding Status}" Foreground="White"/>
                </Border>
            </StackPanel>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Status}" Value="NEW">
                <Setter Property="Background" Value="#FF000087" TargetName="StatusBorder"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="WATCHING">
                <Setter Property="Background" Value="#FFB68400" TargetName="StatusBorder"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="WATCHED">
                <Setter Property="Background" Value="#FF004D15" TargetName="StatusBorder"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>



    <Style x:Key="AnimeItemDisplay" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource SimpleFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{StaticResource HighlightBrush}" TargetName="Border"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AnimeItemDisplayContinueWatching" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource SimpleFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{StaticResource HighlightBrush}" TargetName="Border"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EpisodeDisplayStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource SimpleFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="5"/>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#FF535353"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{StaticResource PrimaryBrush}" TargetName="Border"/>
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="2"/>

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                        <!-- The bindings are useful so that the control can be parameterized without editing the template -->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ToneBrush}" TargetName="Border"/>
                            <Setter Property="BorderThickness" Value="2" TargetName="Border"/>
                            <Setter Property="CornerRadius" Value="2" TargetName="Border"/>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource SecondaryBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource BlackBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource HighlightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style TargetType="Image" x:Key="BackgroundStyle">
        <Setter Property="Source" Value="/culTAKU;component/Icons/dark_theme_main_background.png"/>
    </Style>

    <Style TargetType="Grid" x:Key="Background">
        <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
    </Style>
</ResourceDictionary>